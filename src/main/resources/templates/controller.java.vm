package ${package.Controller};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import java.util.Arrays;
import java.util.List;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import springfox.documentation.annotations.ApiIgnore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${restControllerStyle})
#else
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#macro(serviceLowerCase $s)
    #set ($first=$s.substring(0,1).toLowerCase())
    #set ($left=$s.substring(1))
    #set ($serviceVar="$first$left")
#end
#serviceLowerCase(${table.serviceName})
/**
 * <p>
 * $!{table.comment} 控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(tags = "$!{table.comment}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private static Logger log = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    private ${table.serviceName} ${serviceVar};
    /**
     * 分页查询所有数据
     *
     * @param page    分页对象
     * @param ${table.entityPath} 查询实体
     * @return 分页数据
     */
    @ApiOperation(value = "分页查询")
    @ApiImplicitParams({
        @ApiImplicitParam(name = "field", value = "排序字段"),
        @ApiImplicitParam(name = "order", value = "是否升序，默认升序")
    })
    @PostMapping
    public R selectAll(@ApiIgnore Page<${entity}> page, ${entity} ${table.entityPath},@RequestParam(required = false) String field,@RequestParam(required = false) Boolean order){
        if(field!=null){
            field=StrUtil.toUnderlineCase(field);
            List<OrderItem> orderItems=(order==null||order)?OrderItem.ascs(field):OrderItem.descs(field);
            page.setOrders(orderItems);
        }
        page.setOptimizeCountSql(false);
        page.setSearchCount(false);
    #if(!$null.isNull(${foreignKeys})&&$foreignKeys.size()>0)
        QueryWrapper<${entity}> wrapper=new QueryWrapper<>();
        page.setTotal(${serviceVar}.count(wrapper));
        return success(${serviceVar}.page${entity}(page, wrapper));
    #else
        LambdaQueryWrapper<${entity}> wrapper=new LambdaQueryWrapper<>();
        page.setTotal(${serviceVar}.count(wrapper));
        return success(${serviceVar}.page(page,wrapper));
    #end
    }

    /**
     * 通过主键查询单条数据
     *
     * @param id 主键
     * @return 单条数据
     */
    @ApiOperation(value = "ID查询")
    @GetMapping("{id}")
    public R selectOne(@PathVariable String id){
        return success(${serviceVar}.getById(id));
    }

    /**
     * 查询所有数据
     *
     * @param ${table.entityPath} 实体对象
     * @return 所有数据
     */
    @ApiOperation(value = "列表查询")
    @GetMapping
    public R list(${entity} ${table.entityPath}){
    #if(!$null.isNull(${foreignKeys})&&$foreignKeys.size()>0)
        QueryWrapper<${entity}> wrapper=new QueryWrapper<>();
        return success(${serviceVar}.list${entity}(wrapper));
    #else
        LambdaQueryWrapper<${entity}> wrapper=new LambdaQueryWrapper<>();
        return success(${serviceVar}.list(wrapper));
    #end
    }

    /**
     * 修改数据
     *
     * @param ${table.entityPath} 实体对象
     * @return 修改结果
     */
    @ApiOperation(value = "新增修改")
    @PutMapping
    public R save(${entity} ${table.entityPath}){
        return success(${serviceVar}.saveOrUpdate(${table.entityPath}));
    }

    /**
     * 删除数据
     *
     * @param idList 主键集合
     * @return 删除结果
     */
    @ApiOperation(value = "删除")
    @DeleteMapping
    public R delete(@RequestParam("ids") String[] idList){
        return success(${serviceVar}.removeByIds(Arrays.asList(idList)));
    }

}
